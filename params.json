{"name":"UFO Projects","tagline":"Overview of ufo-kit projects","body":"# ufo-core\r\n\r\nUFO is a multi-threaded, GPU-enabled and distributed data processing _framework_. It provides base classes, scheduler implementations and run-time management to describe a workflow as a graph of processing nodes. The nodes are implemented as plugins in the [ufo-filters](#filters) sister project.\r\n\r\nThe [ufo-python-tools](#pythontools) suite provides functions for better integration within Python-based projects. The [ufo-scripts](#scripts) project is a collection of small programs for offline reconstruction of tomographic data using the UFO framework. A wide range of sample programs that test the framework can be found in the [ufo-tests](#tests) project.\r\n\r\n* [User Manual](http://ufo-core.readthedocs.org/en/latest/)\r\n* [API Reference](http://ufo.kit.edu/extra/reference/)\r\n* [Task Reference](http://ufo.kit.edu/extra/filters/reference/)\r\n* [Source Code](https://github.com/ufo-kit/ufo-core)\r\n\r\n***\r\n\r\n### <a name=\"filters\" />ufo-filters\r\n\r\nThe repository of ufo-filters contains basic plugins used in combination with the UFO data processing framework.\r\n* _Data sources_: TIFF and EDF reader, Metaball generator, libuca camera source\r\n* _Data filters_: Averager, Flat-field correction, Cropping, Complex arithmetics, etc.\r\n* _Data sinks_: TIFF and EDF writer, Pipe connection \r\n<br /><br />\r\n* [Task Reference](http://ufo.kit.edu/extra/filters/reference/) (description of each plugins property)\r\n* [Source Code](https://github.com/ufo-kit/ufo-filters)\r\n\r\n***\r\n\r\n### <a name=\"pythontools\" />ufo-python-tools\r\nThe Python tools for UFO, are addons to make interaction with [UFO](https://github.com/ufo-kit/ufo-core) easier:\r\n* UFO and Numpy buffers can be converted freely between each other. \r\n* It can become a daunting task to create tasks through the plugin manager, set configuration and hook up tasks one by one. The `ufo.Factory` class wraps the whole process in a concise way.\r\n<br /><br />\r\n* [Source Code](https://github.com/ufo-kit/ufo-python-tools)\r\n\r\n***\r\n\r\n### <a name=\"scripts\" />ufo-scripts \r\n\r\nThis repository contains data processing scripts to be used with the UFO framework. At the moment they are targeted at high-performance reconstruction of tomographic data sets.\r\n\r\n* [Source Code](https://github.com/ufo-kit/ufo-scripts)\r\n\r\n***\r\n\r\n### <a name=\"tests\" />ufo-tests\r\nIntegration tests for the UFO framework\r\n\r\n* [Source Code](https://github.com/ufo-kit/ufo-tests)\r\n\r\n***\r\n\r\n# libuca \r\n\r\nlibuca (short for Unified Camera access) is a GLib-based library to access two-dimensional pixel detectors. It gives the user a general interface to a variety of different cameras and camera types. \r\n\r\n* [User Manual](http://ufo.kit.edu/extra/libuca/manual/manual.html)\r\n* [Source Code](https://github.com/ufo-kit/libuca)\r\n\r\n***\r\n\r\n# concert\r\n\r\nConcert is a light-weight control system interface to control Tango and native devices. It can be used as a library or from a session and within an integrated [IPython](http://ipython.org/) shell.\r\n\r\n* [Documentation](https://concert.readthedocs.org/en/latest/)\r\n* [Source Code](https://github.com/ufo-kit/concert)\r\n* The github repository [concert-examples](https://github.com/ufo-kit/concert-examples) contains a set of sample sessions to show how things could be organized within a Concert session and how processes can be defined.\r\n\r\n***\r\n\r\n# libpco\r\n\r\nlibpco is a library to access CameraLink-based cameras from German camera manufacturer PCO.\r\n\r\n* [Source Code](https://github.com/ufo-kit/libpco)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}